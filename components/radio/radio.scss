$sizes: compact, comfortable, spacious, dense;
$variants: surface, light, dark;

@mixin radioItemVariantInputState($variant, $selected, $selectedText, $errorText, $state) {
  border-color: var(--ids-comp-radio-input-#{$selectedText}-color-border-#{$variant}#{$errorText}-#{$state});
  background-color: var(--ids-comp-radio-input-#{$selectedText}-color-bg-#{$variant}-#{$state});

  @if ($selected) {
    & + .ids-radio-item__inner-circle {
      border-color: var(--ids-comp-radio-input-selected-inner-circle-color-border-#{$variant}#{$errorText}-#{$state});
      background: var(--ids-comp-radio-input-selected-inner-circle-color-bg-#{$variant}#{$errorText}-#{$state});
    }
  }
}

@mixin radioItemVariantInput($variant, $selected, $error) {
  $selectedText: '';
  @if ($selected) {
    $selectedText: 'selected';
  } @else {
    $selectedText: 'unselected';
  }
  $errorText: '';
  @if ($error == true) {
    $errorText: '-error';
  }

  &:not(:disabled) {
    @include radioItemVariantInputState($variant, $selected, $selectedText, $errorText, default);

    &:hover {
      @include radioItemVariantInputState($variant, $selected, $selectedText, $errorText, hovered);
    }
    &:active {
      @include radioItemVariantInputState($variant, $selected, $selectedText, $errorText, pressed);
    }
    &:focus,
    &:focus-visible {
      @include radioItemVariantInputState($variant, $selected, $selectedText, $errorText, default);
      @if ($error != true) {
        outline-color: var(--ids-comp-radio-input-#{$selectedText}-color-focused-outline-#{$variant}-focused);
      }
    }
  }

  @if ($error != true) {
    &:disabled {
      @include radioItemVariantInputState($variant, $selected, $selectedText, $errorText, disabled);
    }
  }
}

@mixin radioItemVariantTouchTargetHover($variant, $selected, $error) {
  $selectedText: '';
  @if ($selected) {
    $selectedText: 'selected';
  } @else {
    $selectedText: 'unselected';
  }
  $errorText: '';
  @if ($error == true) {
    $errorText: '-error';
  }

  & + input[type='radio'] {
    &:not(:disabled) {
      border-color: var(--ids-comp-radio-input-#{$selectedText}-color-border-#{$variant}#{$errorText}-hovered);
      background-color: var(--ids-comp-radio-input-#{$selectedText}-color-bg-#{$variant}-hovered);

      @if ($selected) {
        & + .ids-radio-item__inner-circle {
          border-color: var(--ids-comp-radio-input-selected-inner-circle-color-border-#{$variant}#{$errorText}-hovered);
          background: var(--ids-comp-radio-input-selected-inner-circle-color-bg-#{$variant}#{$errorText}-hovered);
        }
      }
    }
  }
}

.ids-radio-group {
  display: inline-flex;
  align-items: flex-start;
  justify-content: start;

  &.ids-radio-group-horizontal {
    flex-direction: row;
  }

  &.ids-radio-group-vertical {
    flex-direction: column;
  }

  &.ids-radio-group-left {
    align-items: flex-end;
  }

  &.ids-radio-group-right {
    align-items: flex-start;
  }

  .ids-radio-item {
    display: flex;
    align-items: center;

    &.ids-radio-item-left {
      flex-direction: row-reverse;
      justify-content: start;
    }

    &.ids-radio-item-righ {
      flex-direction: row;
      justify-content: start;
    }

    &.ids-radio-item-top {
      flex-direction: column-reverse;
      align-items: center;
    }

    &.ids-radio-item-bottom {
      flex-direction: column;
      align-items: center;
    }

    .ids-radio-item__input-wrapper {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;

      .ids-radio-item__touch-target {
        position: absolute;
        cursor: pointer;
      }

      input[type='radio'] {
        appearance: none;
        -webkit-appearance: none;
        flex-shrink: 0;
        border-style: solid;
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-shrink: 0;
        cursor: pointer;

        & + .ids-radio-item__inner-circle {
          position: absolute;
          flex-shrink: 0;
          border-style: solid;
          height: 0;
          width: 0;
          border-width: 0;
          cursor: pointer;
        }

        &:focus,
        &:focus-visible {
          outline-offset: 2px;
          outline-style: solid;
        }
      }
    }

    .ids-radio-item__label {
      cursor: pointer;
    }

    &.ids-radio-item-disabled {
      .ids-radio-item__input-wrapper {
        .ids-radio-item__touch-target {
          cursor: not-allowed;
        }

        input[type='radio'] {
          cursor: not-allowed;

          & + .ids-radio-item__inner-circle {
            cursor: not-allowed;
          }
        }
      }

      .ids-radio-item__label {
        cursor: not-allowed;
      }
    }

    .ids-radio-item__label {
      display: flex;
      justify-content: center;
      align-items: center;
      flex: 1 0 0;
      font-style: normal;
    }
  }

  @each $size in $sizes {
    &.ids-radio-group-#{$size} {
      &.ids-radio-group-horizontal {
        padding: var(--ids-comp-radio-group-horizontal-container-size-padding-y-#{$size})
          var(--ids-comp-radio-group-horizontal-container-size-padding-x-#{$size});
        gap: var(--ids-comp-radio-group-horizontal-container-size-gap-#{$size});
      }

      &.ids-radio-group-vertical {
        padding: var(--ids-comp-radio-group-vertical-container-size-padding-y-#{$size})
          var(--ids-comp-radio-group-vertical-container-size-padding-x-#{$size});
        gap: var(--ids-comp-radio-group-vertical-container-size-gap-#{$size});
      }

      & > .ids-radio-item {
        padding: var(--ids-comp-radio-button-container-size-padding-y-#{$size})
          var(--ids-comp-radio-button-container-size-padding-x-#{$size});
        gap: var(--ids-comp-radio-button-container-size-gap-#{$size});

        .ids-radio-item__input-wrapper {
          $input-height: var(--ids-comp-radio-button-input-size-height-#{$size});
          $input-width: var(--ids-comp-radio-button-input-size-width-#{$size});

          .ids-radio-item__touch-target {
            $touch-target-height: var(--ids-comp-radio-button-input-size-touchtarget-height-#{$size});
            $touch-target-width: var(--ids-comp-radio-button-input-size-touchtarget-width-#{$size});
            top: calc(($input-height - $touch-target-height) / 2);
            left: calc(($input-width - $touch-target-width) / 2);
            height: $touch-target-height;
            width: $touch-target-width;
          }

          input[type='radio'] {
            width: $input-width;
            height: $input-height;
            border-radius: var(--ids-comp-radio-button-input-size-border-radius-#{$size});
            border-width: var(--ids-comp-radio-button-input-size-border-width-#{$size});

            &:checked {
              & + .ids-radio-item__inner-circle {
                width: var(--ids-comp-radio-button-input-inner-circle-size-width-#{$size});
                height: var(--ids-comp-radio-button-input-inner-circle-size-height-#{$size});
                border-radius: var(--ids-comp-radio-button-input-inner-circle-size-border-radius-#{$size});
                border-width: var(--ids-comp-radio-button-input-inner-circle-size-border-width-#{$size});
              }
            }

            &:focus,
            &:focus-visible {
              outline-width: var(--ids-comp-radio-focused-outline-outline-#{$size});
            }
          }
        }

        .ids-radio-item__label {
          padding: var(--ids-comp-radio-button-label-size-padding-y-#{$size}) 0px;
          font-family: var(--ids-comp-radio-button-label-typography-font-family-#{$size});
          font-size: var(--ids-comp-radio-button-label-typography-font-size-#{$size});
          font-weight: var(--ids-comp-radio-button-label-typography-font-weight-#{$size});
          line-height: var(--ids-comp-radio-button-label-typography-line-height-#{$size});
          letter-spacing: var(--ids-comp-radio-button-label-typography-letter-spacing-#{$size});
        }
      }
    }
  }

  @each $variant in $variants {
    .ids-radio-item-#{$variant} {
      .ids-radio-item__input-wrapper {
        .ids-radio-item__touch-target:hover {
          @include radioItemVariantTouchTargetHover($variant, false, false);
        }
        input[type='radio'] {
          @include radioItemVariantInput($variant, false, false);

          &:checked {
            @include radioItemVariantInput($variant, true, false);
          }
        }
      }

      &:has(input[type='radio']:checked) {
        .ids-radio-item__input-wrapper {
          .ids-radio-item__touch-target:hover {
            @include radioItemVariantTouchTargetHover($variant, true, false);
          }
        }
      }

      .ids-radio-item__label {
        color: var(--ids-comp-radio-label-color-fg-#{$variant}-default);

        &:hover {
          color: var(--ids-comp-radio-label-color-fg-#{$variant}-hovered);
        }
        &:active {
          color: var(--ids-comp-radio-label-color-fg-#{$variant}-pressed);
        }
        &:focus,
        &:focus-visible {
          color: var(--ids-comp-radio-label-color-fg-#{$variant}-focused);
        }
      }

      &.ids-radio-item-disabled .ids-radio-item__label {
        color: var(--ids-comp-radio-label-color-fg-#{$variant}-disabled);
      }
    }
  }

  &.ng-invalid,
  &.ids-radio-group-invalid {
    @each $variant in $variants {
      .ids-radio-item-#{$variant} {
        .ids-radio-item__input-wrapper {
          .ids-radio-item__touch-target:hover {
            @include radioItemVariantTouchTargetHover($variant, false, true);
          }
          input[type='radio'] {
            @include radioItemVariantInput($variant, false, true);

            &:checked {
              @include radioItemVariantInput($variant, true, true);
            }
          }
        }

        &:has(input[type='radio']:checked) {
          .ids-radio-item__input-wrapper {
            .ids-radio-item__touch-target:hover {
              @include radioItemVariantTouchTargetHover($variant, true, true);
            }
          }
        }
      }
    }
  }
}
